# create creds:          kubectl create secret generic rabbitmq --from-literal=rabbitmq.user=$(sed $(perl -e "print int rand(99999)")"q;d" /usr/share/dict/words) --from-literal=rabbitmq.pass=$(LC_ALL=C tr -cd '[:alnum:]' < /dev/urandom | head -c 32)
# create erlang cookie:  kubectl create secret generic erlang --from-literal=erlang.cookie=$(LC_ALL=C tr -cd '[:alnum:]' < /dev/urandom | head -c 64)

apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
type: Opaque
data:
  rabbitmq.pass: RVZCNklCQVhWMTlUWEtlQWZ4dWRUQkk0RVk3dzljaWk=
  rabbitmq.user: Y29sbGFib3JhdGU=
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
type: Opaque
data:
  erlang.cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
data:
  erlang.hostname: long
  kube.hostname.fix: 'true'
  rabbitmq.log.level: info
---
kind: Service
apiVersion: v1
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
spec:
  selector:
    app: rabbitmq
  ports:
    - name: amqp
      port: 5672
    - name: admin
      port: 15672
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq
        test: 'true'
        environment: testing
    spec:
      containers:
      - name: rabbitmq
        image: telephoneorg/rabbitmq:latest
        imagePullPolicy: Always
        env:
        - name: ERLANG_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: rabbitmq
              key: erlang.hostname
        - name: KUBE_HOSTNAME_FIX
          valueFrom:
            configMapKeyRef:
              name: rabbitmq
              key: kube.hostname.fix
        - name: RABBITMQ_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: rabbitmq
              key: rabbitmq.log.level
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: rabbitmq.user
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: rabbitmq.pass
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang
              key: erlang.cookie
        ports:
        - name: amqp
          containerPort: 5672
        - name: admin
          containerPort: 15672
        volumeMounts:
        - name: mnesia-ramfs
          mountPath: /var/lib/rabbitmq/mnesia
        readinessProbe:
          tcpSocket:
            port: 5672
          initialDelaySeconds: 10
          timeoutSeconds: 10
        livenessProbe:
          exec:
            command: ["/bin/bash", "-lc", "rabbitmqctl node_health_check | grep -q '^Health check passed'"]
          initialDelaySeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: mnesia-ramfs
        emptyDir:
          medium: Memory
      restartPolicy: Always
